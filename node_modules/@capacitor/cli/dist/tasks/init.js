"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const definitions_1 = require("../definitions");
const add_1 = require("../tasks/add");
const common_1 = require("../common");
const emoji_1 = require("../util/emoji");
const chalk = require('chalk');
async function initCommand(config, name, id) {
    try {
        // Get app name
        const appName = await common_1.getName(config, name);
        // Get app identifier
        const appId = await common_1.getAppId(config, id);
        await common_1.check(config, [
            (config) => common_1.checkAppName(config, appName),
            (config) => common_1.checkAppId(config, appId)
        ]);
        await common_1.runTask(`Initializing Capacitor project in ${chalk.blue(config.app.rootDir)}`, async () => {
            config.app.appId = appId;
            config.app.appName = appName;
            // Get or create our config
            await common_1.getOrCreateConfig(config);
            await common_1.mergeConfig(config, {
                appId,
                appName
            });
        });
        await common_1.printNextSteps(config, "");
    }
    catch (e) {
        common_1.log('Usage: npx cap init appName appId\n');
        common_1.log('Example: npx cap init "My App" "com.example.myapp"\n');
        common_1.logFatal(e);
    }
}
exports.initCommand = initCommand;
async function promptNewProject(config) {
    const inquirer = await Promise.resolve().then(() => require('inquirer'));
    const answers = await inquirer.prompt([{
            type: 'input',
            name: 'isNew',
            message: `Is this a new app? Answer 'n' if adding Capacitor to an existing project`,
            default: 'y'
        }]);
    return answers.isNew === 'y';
}
async function printExistingProjectMessage(config) {
    common_1.log('\n\n');
    common_1.log(`${emoji_1.emoji('ðŸŽˆ', '*')}   ${chalk.bold('Adding Capacitor to an existing project is easy:')}  ${emoji_1.emoji('ðŸŽˆ', '*')}`);
    common_1.log(`\nnpm install --save @capacitor/cli @capacitor/core`);
    if (config.cli.os === definitions_1.OS.Mac) {
        common_1.log(`\nnpx capacitor add ios`);
    }
    common_1.log(`\nnpx capacitor add android`);
    common_1.log(`\nLearn more: https://capacitor.ionicframework.com/docs/getting-started/\n`);
}
/**
 * Add Android and iOS by default
 * @param config
 */
async function addPlatforms(config) {
    await common_1.runTask(`Adding native platforms`, async () => {
        if (config.cli.os === definitions_1.OS.Mac) {
            await common_1.runTask(`Adding iOS platform`, async () => {
                await add_1.addCommand(config, 'ios');
            });
        }
        await common_1.runTask(`Adding Android platform`, async () => {
            await add_1.addCommand(config, 'android');
        });
    });
}
