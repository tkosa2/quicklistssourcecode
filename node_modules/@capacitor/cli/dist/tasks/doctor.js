"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const common_1 = require("../common");
const doctor_1 = require("../android/doctor");
const doctor_2 = require("../ios/doctor");
const fs_1 = require("../util/fs");
const emoji_1 = require("../util/emoji");
const path_1 = require("path");
const chalk_1 = require("chalk");
async function doctorCommand(config, selectedPlatform) {
    common_1.log(`${emoji_1.emoji('ðŸ’Š', '')}   ${chalk_1.default.bold('Capacitor Doctor')}  ${emoji_1.emoji('ðŸ’Š', '')} \n`);
    await doctorCore(config);
    const platforms = config.selectPlatforms(selectedPlatform);
    return Promise.all(platforms.map(platformName => {
        return doctor(config, platformName);
    }));
}
exports.doctorCommand = doctorCommand;
async function doctorCore(config) {
    let cliVersion = await common_1.runCommand(`npm info @capacitor/cli version`);
    let coreVersion = await common_1.runCommand(`npm info @capacitor/cli version`);
    let androidVersion = await common_1.runCommand(`npm info @capacitor/ios version`);
    let iosVersion = await common_1.runCommand(`npm info @capacitor/ios version`);
    common_1.log(`${chalk_1.default.bold.blue('Dependencies:')}\n`);
    common_1.log(`  ${chalk_1.default.bold('@capacitor/cli:')}`, cliVersion);
    common_1.log(`  ${chalk_1.default.bold('@capacitor/core:')}`, coreVersion);
    common_1.log(`  ${chalk_1.default.bold('@capacitor/android:')}`, androidVersion);
    common_1.log(`  ${chalk_1.default.bold('@capacitor/ios:')}`, iosVersion);
    // Get the version of our pod installed
    const podLockPath = path_1.join(config.app.rootDir, 'ios/App/Podfile.lock');
    if (await fs_1.existsAsync(podLockPath)) {
        const podLock = await fs_1.readFileAsync(podLockPath, 'utf8');
        const capacitorDepRegex = /Capacitor \(([^)]+)\)/g;
        const match = capacitorDepRegex.exec(podLock);
        const version = match && match[1];
        common_1.log(`  ${chalk_1.default.bold('Capacitor iOS:')}`, version || 'not installed');
    }
    // Get the version of our Android library installed
    const buildGradlePath = path_1.join(config.app.rootDir, 'android/app/build.gradle');
    if (await fs_1.existsAsync(buildGradlePath)) {
        const buildGradle = await fs_1.readFileAsync(buildGradlePath, 'utf8');
        const capacitorDepRegex = /implementation 'ionic-team:capacitor-android:([^']+)/g;
        const match = capacitorDepRegex.exec(buildGradle);
        const version = match && match[1];
        common_1.log(`  ${chalk_1.default.bold('Capacitor Android:')}`, version || 'not installed');
    }
    common_1.log('');
}
exports.doctorCore = doctorCore;
async function doctor(config, platformName) {
    if (platformName === config.ios.name) {
        await doctor_2.doctorIOS(config);
    }
    else if (platformName === config.android.name) {
        await doctor_1.doctorAndroid(config);
    }
    else if (platformName === config.web.name) {
        return Promise.resolve();
    }
    else {
        throw `Platform ${platformName} is not valid.`;
    }
}
exports.doctor = doctor;
